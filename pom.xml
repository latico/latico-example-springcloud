<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.latico.example.springcloud</groupId>
    <artifactId>latico-example-springcloud</artifactId>
    <version>1.0</version>
    <packaging>pom</packaging>

    <name>latico-example-springcloud</name>
    <!-- FIXME change it to the project's website -->
    <url>http://www.example.com</url>

    <modules>
        <module>server-register-eureka</module>
        <module>service-provider-eureka</module>
        <module>service-invoker-resttemplate-eureka</module>
        <module>server-apigateway-gateway</module>
        <module>server-apigateway-zuul</module>
        <module>server-nginx</module>
        <module>service-provider-zookeeper</module>
        <module>service-invoker-zookeeper</module>
        <module>server-register-zookeeper</module>
        <module>server-register-consul</module>
        <module>service-provider-consul</module>
        <module>service-invoker-consul</module>
        <module>server-config-zookeeper</module>
        <module>server-config-springcloud-local</module>
        <module>server-config-springcloud-git</module>
        <module>service-invoker-resttemplate-eureka-hystrix</module>
        <module>service-invoker-feign-eureka</module>
        <module>service-invoker-feign-eureka-hystrix</module>
        <module>service-invoker-feign-eureka-hystrix-dashboard</module>
        <module>server-monitor-hystrix-dashboard-turbine</module>
        <module>server-monitor-hystrix-dashboard</module>
        <module>service-invoker-resttemplate-eureka-hystrix-dashboard</module>
        <module>server-config-springcloud-local-bus-rabbitmq</module>
        <module>service-invoker-config-eureka-bus-rabbitmq</module>
        <module>server-config-springcloud-bus-refresh-resttemplate</module>
        <module>service-invoker-config-eureka</module>
        <module>service-provider-stream-kafka</module>
        <module>service-invoker-stream-kafka</module>
        <module>server-stream-kafka</module>
        <module>service-handler-stream-transfer-kafka</module>
        <module>server-sleuth-zipkin</module>
        <module>service-provider-zipkin</module>
        <module>server-security-mysql</module>
        <module>service-handler-data-mongodb</module>
        <module>service-handler-data-jpa</module>
        <module>service-handler-data-redis</module>
        <module>server-sleuth-elk</module>
        <module>server-apigateway-ngineureka</module>
        <module>service-provider-nacos</module>
        <module>service-invoker-nacos</module>
        <module>service-invoker-config-nacos</module>
    </modules>

    <!-- 版本和变量统一管理 -->
    <properties>
        <!-- JDK版本配置 -->
        <java.version>1.8</java.version>
        <!-- JDK版本配置 -->
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>

        <!-- 项目编码配置 -->
        <project.encoding>UTF-8</project.encoding>
        <!-- 文件拷贝时的编码 -->
        <project.build.sourceEncoding>${project.encoding}</project.build.sourceEncoding>
        <project.reporting.outputEncoding>${project.encoding}</project.reporting.outputEncoding>
        <!-- 编译时的编码 -->
        <maven.compiler.encoding>${project.encoding}</maven.compiler.encoding>

        <!--跳过单元测试-->
        <skipTests>true</skipTests>
        <!--取消webxml的依赖，非必须的-->
        <failOnMissingWebXml>false</failOnMissingWebXml>

        <!--解决控制台乱码问题-->
        <argLine>-Dfile.encoding=UTF-8</argLine>

        <!-- build的时候设置的时间格式, 可用于生成文件名等 -->
        <maven.build.timestamp.format>yyyyMMdd</maven.build.timestamp.format>

        <!-- logback版本配置 -->
        <slf4j.version>1.7.25</slf4j.version>
        <logback.version>1.2.3</logback.version>
        <janino.version>3.0.11</janino.version>
        <springcloud.version>Hoxton.SR9</springcloud.version>
<!--        <springcloud.version>2020.0.0</springcloud.version>-->
        <springboot.version>2.3.2.RELEASE</springboot.version>
<!--        <springboot.version>2.4.2</springboot.version>-->
        <swagger.version>2.8.0</swagger.version>
        <feign.version>10.2.0</feign.version>
<!--        <springcloud.alibaba.version>2020.0.RC1</springcloud.alibaba.version>-->
        <springcloud.alibaba.version>2.2.5.RELEASE</springcloud.alibaba.version>
    </properties>

    <!-- 打包配置 -->
    <build>
        <finalName>${project.artifactId}</finalName>
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <excludes>
                    <exclude>
                        **/*.java
                    </exclude>
                </excludes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
        </resources>
        <plugins>
            <!-- 打源码包 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
                <version>3.0.1</version>
                <executions>
                    <execution>
                        <id>attach-sources</id>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <!-- Compile -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.0</version>
                <configuration>
                    <encoding>${project.encoding}</encoding>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>

            <!--打包骨架插件，有bug(模块中不能含有名称为config的文件夹)-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-archetype-plugin</artifactId>
                <version>3.0.1</version>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-clean-plugin</artifactId>
                <version>3.0.0</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.0.2</version>
                <configuration>
                    <encoding>${project.encoding}</encoding>
                </configuration>
            </plugin>
            <!--因为该模块的pom不是继承springboot的父依赖，所以这个打包插件需要参考springboot的父的打包配置-->
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${springboot.version}</version>
                <executions>
                    <execution>
                        <id>repackage</id>
                        <goals>
                            <goal>repackage</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!--指定启动类-->
                    <!--<mainClass>${start-class}</mainClass>-->
                </configuration>
            </plugin>

            <!--拷贝classpath配置等文件，执行assembly-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <encoding>${project.encoding}</encoding>
                </configuration>
                <executions>
                    <execution>
                        <id>replace-win</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <filters>
                                <filter>build/assembly/program.properties</filter>
                            </filters>
                            <descriptors>
                                <!--<descriptor>${basedir}/../build/assembly/assembly-descriptor-win.xml</descriptor>-->
                                <descriptor>build/assembly/assembly-descriptor-win.xml</descriptor>
                            </descriptors>
                        </configuration>
                    </execution>
                    <execution>
                        <id>replace-unix</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <filters>
                                <filter>build/assembly/program.properties</filter>
                            </filters>
                            <descriptors>
                                <!--<descriptor>${basedir}/../build/assembly/assembly-descriptor-unix.xml</descriptor>-->
                                <descriptor>build/assembly/assembly-descriptor-unix.xml</descriptor>
                            </descriptors>

                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>

        <!-- 专用插件统一管理 -->
        <pluginManagement>
            <plugins>

            </plugins>
        </pluginManagement>

    </build>
    <!-- 专用依赖统一管理 -->
    <dependencyManagement>
        <dependencies>
            <!--注意：根据同一个pom文件，依赖的优先级是根据依赖的顺序决定，因为要以springboot为主，而且依赖的打包插件等都是要以springboot优先，如果以springcloud在前，那么spring-boot-maven-plugin打包插件不会打包成springboot的启动方式-->
            <!--管理导入springboot的父pom-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-parent</artifactId>
                <version>${springboot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!--springcloud父依赖管理-->
            <!-- https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-dependencies -->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${springcloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${springcloud.alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>2.0.0</version>
            </dependency>

            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger2</artifactId>
                <version>${swagger.version}</version>
            </dependency>

            <dependency>
                <groupId>io.springfox</groupId>
                <artifactId>springfox-swagger-ui</artifactId>
                <version>${swagger.version}</version>
            </dependency>

            <!--阿里巴巴数据源-->
            <!-- https://mvnrepository.com/artifact/com.alibaba/druid -->
            <!-- alibaba的druid数据库连接池 -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>1.1.9</version>
            </dependency>
            <!--阿里巴巴数据源-->
            <!-- 分页插件 -->
            <dependency>
                <groupId>com.github.pagehelper</groupId>
                <artifactId>pagehelper-spring-boot-starter</artifactId>
                <version>1.2.5</version>
            </dependency>

            <!--模板框架-->
            <dependency>
                <groupId>org.freemarker</groupId>
                <artifactId>freemarker</artifactId>
                <version>2.3.28</version>
            </dependency>
            <!--模板框架-->
            <!-- https://mvnrepository.com/artifact/org.aspectj/aspectjweaver -->
            <dependency>
                <groupId>org.aspectj</groupId>
                <artifactId>aspectjweaver</artifactId>
                <version>1.9.2</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <!-- 共用依赖 -->
    <dependencies>

        <!-- 单元测试开始-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.vintage</groupId>
            <artifactId>junit-vintage-engine</artifactId>
            <version>4.12.2</version>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.mockito/mockito-core -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>2.23.4</version>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.assertj/assertj-core -->
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>3.11.1</version>
            <scope>test</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.easymock/easymock -->
        <dependency>
            <groupId>org.easymock</groupId>
            <artifactId>easymock</artifactId>
            <version>4.0.2</version>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all -->
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-all</artifactId>
            <version>1.3</version>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-generator-annprocess -->
        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-generator-annprocess</artifactId>
            <version>1.21</version>
            <scope>test</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.openjdk.jmh/jmh-core -->
        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-core</artifactId>
            <version>1.21</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>eu.codearte.catch-exception</groupId>
            <artifactId>catch-exception</artifactId>
            <version>1.4.4</version>
            <scope>test</scope>
        </dependency>

        <!-- 单元测试结束-->

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!--servlet容器使用-->
        <!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>4.0.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.latico.commons</groupId>
            <artifactId>latico-commons-common</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <!--spring工具类，可以拿到spring里面的对象操作-->
        <dependency>
            <groupId>com.latico.commons</groupId>
            <artifactId>latico-commons-spring</artifactId>
            <version>1.0.0-SNAPSHOT</version>
        </dependency>
        <!--swagger restful接口自动可视化界面工具-->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${swagger.version}</version>
        </dependency>

        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${swagger.version}</version>
        </dependency>
        <!--swagger restful接口自动可视化界面工具-->
    </dependencies>


</project>
